[
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Presentations",
    "section": "",
    "text": "Crafting your website with Quarto and GitHub\n\n\n\n\n\n\n\nmiscelllaneous\n\n\n\n\n\n\n\n\n\n\n\nSep 14, 2023\n\n\nLucas Godoy\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Student Workshop Series on Computing",
    "section": "",
    "text": "Series of talks and workshops from students to students."
  },
  {
    "objectID": "posts/quarto-website/index.html",
    "href": "posts/quarto-website/index.html",
    "title": "Crafting your website with Quarto and GitHub",
    "section": "",
    "text": "pwd lists current directory;\nls lists directory content. For example, run ls my-dir to know what is inside the directory called my-dir.\ncd stands for change directory. To navigate to a directory, use: cd   &lt;path-to-directory&gt;;\nmv Moves or renames files. Usage: mv &lt;old-name/location&gt; &lt;new-name/location&gt;;"
  },
  {
    "objectID": "posts/quarto-website/index.html#terminal-basics",
    "href": "posts/quarto-website/index.html#terminal-basics",
    "title": "Crafting your website with Quarto and GitHub",
    "section": "",
    "text": "pwd lists current directory;\nls lists directory content. For example, run ls my-dir to know what is inside the directory called my-dir.\ncd stands for change directory. To navigate to a directory, use: cd   &lt;path-to-directory&gt;;\nmv Moves or renames files. Usage: mv &lt;old-name/location&gt; &lt;new-name/location&gt;;"
  },
  {
    "objectID": "posts/quarto-website/index.html#pre-requisites",
    "href": "posts/quarto-website/index.html#pre-requisites",
    "title": "Crafting your website with Quarto and GitHub",
    "section": "Pre-requisites",
    "text": "Pre-requisites\nWe assume you have:\n\nQuarto installed on your labtop;\nA GitHub account;\nWe also assume you are able to connect to GitHub using SSH keys. For more details, see this\nA terminal available (Windows users, see this)."
  },
  {
    "objectID": "posts/quarto-website/index.html#step-1-create-a-repo",
    "href": "posts/quarto-website/index.html#step-1-create-a-repo",
    "title": "Crafting your website with Quarto and GitHub",
    "section": "Step 1: create a repo",
    "text": "Step 1: create a repo\nIn this workshop, we assume you are creating a personal web page. GitHub allows you to host a personal website for free under the domain &lt;username&gt;.github.io. We first need to create a GitHub repository named like that. For example, in this talk, we will create a website for a user called statcomp-org (see Figure 1).\n\n\n\nFigure 1: Screenshot of the page where repos are created"
  },
  {
    "objectID": "posts/quarto-website/index.html#step-2-using-our-quarto-template",
    "href": "posts/quarto-website/index.html#step-2-using-our-quarto-template",
    "title": "Crafting your website with Quarto and GitHub",
    "section": "Step 2: Using our quarto template",
    "text": "Step 2: Using our quarto template\nOpen a terminal window and navigate to a directory where you want to keep your website. On my laptop, I have a directory (or folder) called git-projects where I store all the git repos I work with. The following code chunk creates a directory to store the files we will use to create your website locally and navigates to it.\n\nmkdir &lt;your-username&gt;.github.io\ncd &lt;your-username&gt;.github.io\n\nNow, we obtain a template running the following command:\n\nquarto use template swosc/quarto-template\n\nYou will be asked the following questions. Type “Y” and the key “enter” and “.” and the key “enter”, respectively.\n\nQuarto templates may execute code when documents are rendered. If you do not \ntrust the authors of the template, we recommend that you do not install or \nuse the template.\n? Do you trust the authors of this template (Y/n) › Y\n? Directory name: › .\n\n\n\n\n\n\n\nImportant\n\n\n\nWhen running the command below, we are assuming your current “working directory” in the terminal is the directory where you are going to keep your website. Run pwd, to make sure you are working on the right directory.\n\n\nLet us use ls to track the files that were generated in our directory:\n\nls\nLICENSE.md         blog.qmd           highlight-author.R profile.jpg\nMakefile           custom.scss        index.qmd          pubs.bib\n_quarto.yml        github             lua-refs.lua       styles.css\napa-cv.csl         gitignore          posts\n\n\n\n\n\n\n\nTip\n\n\n\nAlways avoid creating filenames with special charaters or spaces.\n\n\nThe structure of the folder is as follows:\n\n.\n├── LICENSE.md\n├── Makefile\n├── _quarto.yml\n├── apa-cv.csl\n├── blog.qmd\n├── custom.scss\n├── github\n│   └── workflows\n│       └── publish.yml\n├── gitignore\n├── highlight-author.R\n├── index.qmd\n├── lua-refs.lua\n├── posts\n│   ├── _metadata.yml\n│   ├── post-with-code\n│   │   ├── image.jpg\n│   │   └── index.qmd\n│   └── welcome\n│       ├── index.qmd\n│       └── thumbnail.jpg\n├── profile.jpg\n├── pubs.bib\n└── styles.css\n\n6 directories, 19 files\n\nSee below a description on what each of those files are:\n\nLICENSE.md contains the license for your website repo. Currently, the license in the template is a CC-BY license. That is, anyone is free to share and adapt, must give appropriate credit. You can use the usethis package to change this license. See this link for thurther info.\nMakefile will only be used if you wish to include a page in the website with your publications.\n_quarto.yml is perhaps the most important file we will keep. It will give instructions on how to design the website (more on this later).\napa-cv.csl is a helper that controls the templates of the publications list that may be generated using the Makefile.\nblog.md is the file that will control how your “blog” page looks like.\ncustom.scss helps to further customize the website.\ngithub is a folder that we need to rename to .github. It will help GitHub to publish your website online.\ngitignore rename to .gitignore. This file will store the name of the files you do not want to push to GitHub.\nhighlight-author.R is a helper R script intended to help with the creation of a opublications’ list (optional).\nindex.qmd is the landing page of your website.\nlua-refs.lua is a lua script that will be used to generate your publications list (optional).\nposts/ is a folder containing your posts and some metadata (optional, only if you want to blog as well)\n\nThe _metadata.yml contains some information on how to deal with your posts. In particular, it will tell GitHub avoid compiling them (we will compile the posts locally)\nEach subfolder represents a blog post. Within the blogpost folder, we need a index.qmd file (more on this later).\n\nprofile.jpg replace this with your profile picture.\npubs.bibs (optional) input your publications in BibTeX here.\nstyles.css allows for further customization of the website."
  },
  {
    "objectID": "posts/quarto-website/index.html#step-3-setting-up-git-repo",
    "href": "posts/quarto-website/index.html#step-3-setting-up-git-repo",
    "title": "Crafting your website with Quarto and GitHub",
    "section": "Step 3: setting up git repo",
    "text": "Step 3: setting up git repo\nThe next step is to setup the git repo. Before doing so, let’s rename the .github and .gitignore files. This is achieved by running:\n\nmv github .github\nmv gitignore .gitignore\n\nNow, let’s set the git repo and push the gitignore file to the remote repo.\n\ngit init\ngit add .gitignore\ngit commit -m \"commiting gitignore\"\ngit branch -M main\ngit remote add origin git@github.com:&lt;your-username&gt;/&lt;your-username&gt;.github.io\ngit push -u origin main\n\nIf you want to get a grasp of how the website is looking like, run:\n\nquarto preview\n\n\n\n\n\n\n\nNote\n\n\n\nYou can use quarto preview to visualize the changes anytime you modify something on your quarto website."
  },
  {
    "objectID": "posts/quarto-website/index.html#step-4-lets-taylor-our-website",
    "href": "posts/quarto-website/index.html#step-4-lets-taylor-our-website",
    "title": "Crafting your website with Quarto and GitHub",
    "section": "Step 4: Let’s taylor our website!",
    "text": "Step 4: Let’s taylor our website!\n\n\n\n\n\n\nNote\n\n\n\nYou may use your preferred IDE to edit .qmd files. Popular choices are Rstudio, VScode, and (not so popular) emacs. For the last two, we advise you to install the appropriate extensions to enjoy all the capabilities of quarto.\n\n\nFirst, we will customize the index.qmd file.\nAt the beginning, the index.qmd file will look like this:\n---\nimage: profile.jpg\nabout:\n  template: jolla\n  links:\n    - icon: twitter\n      text: Twitter\n      href: https://twitter.com\n    - icon: linkedin\n      text: LinkedIn\n      href: https://linkedin.com\n    - icon: github\n      text: Github\n      href: https://github.com\n\n---\n\n&lt;Write somethign about yourself or your website&gt;\nIn general, we want to replace the href field under Twiter, Linkedin, and GitHub with the link to our own accounts. The profile.jpg file can also be changed (or we can just overwrite it).\nThere are 5 possible inputs for the template field. They are:\n\njolla (used in the provided template)\ntrestles\nsolana\nmarquee\nbroadside\n\nPlay around with the different options to figure out which one suits you best.\nWe can include more pages and resources to our website by adding new .qmd (or even .pdf) files to it and editing the _quarto.yml file.\nFor example, assume we want to include our CV as a .pdf file. First, we copy our .pdf file into the directory where our website project is located, let’s say we named it cv.pdf. Next, we add the following to our _quarto.yml file.\n---\nproject:\n  type: website\n  output-dir: docs\n  render:\n    - \"*.qmd\"\n\nwebsite:\n  title: \"How do you wanna call your website?\"\n  search: true\n  cookie-consent: false\n  twitter-card: true\n  open-graph: true\n  site-url: https://&lt;yourwebsite&gt;.github.io\n  navbar:\n    right:\n      - blog.qmd\n      - text: \"How do I wanna call my CV\"\n        href: cv.pdf\n      - icon: github\n        href: https://github.com/\n      - icon: twitter\n        href: https://twitter.com\n  page-footer: \n    left: \"You can write somethig here too.\"\n\nformat:\n  html:\n    theme: cosmo\n    css: styles.css\n---\nAdding a new .qmd file is even simpler. We do not need the text and href parameters. First, create a .qmd file. Let us call it my-new-qmd.qmd. The “body” of the file can be anything you want, but the header should have (at least) a title. The title will tell how this file will appear in the navbar.\n---\ntitle: \"My new `.qmd` file\"\n---\nTo add my-new-qmd.qmd to the navbar, edit the _quarto.yml as follows:\n---\nproject:\n  type: website\n  output-dir: docs\n  render:\n    - \"*.qmd\"\n\nwebsite:\n  title: \"How do you wanna call your website?\"\n  search: true\n  cookie-consent: false\n  twitter-card: true\n  open-graph: true\n  site-url: https://&lt;yourwebsite&gt;.github.io\n  navbar:\n    right:\n      - blog.qmd\n      - text: \"How do I wanna call my CV\"\n        href: cv.pdf\n      - my-new-qmd.qmd\n      - icon: github\n        href: https://github.com/\n      - icon: twitter\n        href: https://twitter.com\n  page-footer: \n    left: \"You can write somethig here too.\"\n\nformat:\n  html:\n    theme: cosmo\n    css: styles.css\n---\nWe can further customize the navbar. For example, we can move the twitter and github icons to the right and everything else to the left.\n---\nproject:\n  type: website\n  output-dir: docs\n  render:\n    - \"*.qmd\"\n\nwebsite:\n  title: \"How do you wanna call your website?\"\n  search: true\n  cookie-consent: false\n  twitter-card: true\n  open-graph: true\n  site-url: https://&lt;yourwebsite&gt;.github.io\n  navbar:\n    left:\n      - blog.qmd\n      - text: \"How do I wanna call my CV\"\n        href: cv.pdf\n        - my-new-qmd.qmd\n    right:\n      - icon: github\n        href: https://github.com/\n      - icon: twitter\n        href: https://twitter.com\n  page-footer: \n    left: \"You can write somethig here too.\"\n\nformat:\n  html:\n    theme: cosmo\n    css: styles.css\n---\nWe can easily change the way our website look by changing the theme parameter under format and html. To get a list of the 25 themes available, take a look at this link.\nAlternatively, we can change the colors of a theme using a scss (or css file). For instance, let’s add the university colors to the cosmo theme. First, create a file called custom.scss in the root directory of our website. Next, add the following lines to the file\n#| eval: false\n/*-- scss:defaults --*/\n         \n$primary:       #000E2F !default;\n$secondary:     #E4002B !default;\n\n\n\n\n\n\nImportant\n\n\n\nIt is important to include the /*-- scss:defaults --*/ to the custom.scss file. Otherwise, the changes will not be applied.\n\n\nFinally, we rewrite our _quarto.yml file as follows:\n---\nproject:\n  type: website\n  output-dir: docs\n  render:\n    - \"*.qmd\"\n\nwebsite:\n  title: \"How do you wanna call your website?\"\n  search: true\n  cookie-consent: false\n  twitter-card: true\n  open-graph: true\n  site-url: https://&lt;yourwebsite&gt;.github.io\n  navbar:\n    left:\n      - blog.qmd\n      - text: \"How do I wanna call my CV\"\n        href: cv.pdf\n        - my-new-qmd.qmd\n    right:\n      - icon: github\n        href: https://github.com/\n      - icon: twitter\n        href: https://twitter.com\n  page-footer: \n    left: \"You can write somethig here too.\"\n\nformat:\n  html:\n    theme:\n      - cosmo\n      - custom.scss\n    css: styles.css\n---\nWe can also import google fonts into our website. To test it, let’s change the font to Ubuntu. First, we use the Google Font API to import the desired font (for further details see this).\n#| eval: false\n/*-- scss:defaults --*/\n\n// colors\n$primary:       #000E2F !default;\n$secondary:     #E4002B !default;\n\n// fonts\n@import url('https://fonts.googleapis.com/css2?family=Ubuntu&display=swap');\nNext, we update, once again, the _quarto.yml file.\n---\nproject:\n  type: website\n  output-dir: docs\n  render:\n    - \"*.qmd\"\n\nwebsite:\n  title: \"How do you wanna call your website?\"\n  search: true\n  cookie-consent: false\n  twitter-card: true\n  open-graph: true\n  site-url: https://&lt;yourwebsite&gt;.github.io\n  navbar:\n    left:\n      - blog.qmd\n      - text: \"How do I wanna call my CV\"\n        href: cv.pdf\n        - my-new-qmd.qmd\n    right:\n      - icon: github\n        href: https://github.com/\n      - icon: twitter\n        href: https://twitter.com\n  page-footer: \n    left: \"You can write somethig here too.\"\n\nformat:\n  html:\n    theme:\n      - cosmo\n      - custom.scss\n    mainfont: Ubuntu\n    css: styles.css\n---\n\n\n\n\n\n\nTip\n\n\n\nThe possibilities of customization are endless! My advice is to keep it simple.\n\n\n\nBonus\nIf you have your publications in a .bib file, we can use some lua and R to get a tab with your publications working. If you have no idea about what BibTeX is, take a look at this link.\nKalu (Figure 2 (a)) has her publications information in a file called pubs.bib. She has published one paper as a first author and another one as a co-author, collaborating with Cacau (Figure 2 (b)).\n\n\n\n\n\n\n\n(a) Kalu\n\n\n\n\n\n\n\n(b) Cacau\n\n\n\n\nFigure 2: Some of my pets.\n\n\nSee below how her pubs.bib file looks like\n@article{hernandes2023meowmazing,\n  title =        {Meowmazing paper I wrote},\n  author =       {Kalu Hernandez},\n  journal =      {Meow journal},\n  number =       000,\n  pages =        {0--0},\n  year =         2023,\n  publisher =    {Crazy cats dot com}\n}\n\n@article{godoy2022growlmazing,\n  title =        {Growlmazing paper we wrote},\n  author =       {Cacau Godoy, Kalu Hernandez},\n  journal =      {Meow journal},\n  number =       000,\n  pages =        {0--0},\n  year =         2023,\n  publisher =    {Dogs and cats getting along}\n}\nTo transform this pubs.bib into a .qmd file, we will use make (for more details see this). There are some helper files in our directory, they are Makefile, apa-cv.csv (citation style file), highlight-author.R, and lua-refs.lua. The Makefile looks as follows:\nall: publications\n    @quarto render\n\npublications: pubs.bib apa-cv.csl lua-refs.lua\n    @quarto pandoc -L lua-refs.lua \\\n        pubs.bib --csl=apa-cv.csl \\\n        -V --toc=false \\\n        --to=markdown-citations \\\n        -o publications.qmd\n    @Rscript highlight-author.R \\\n        \"Hernandez, K.\" \"publications.qmd\"\n\nclean:\n    rm -rf publications* *~\nIt uses the lua-refs.lua script to create a publications.qmd file based on pubs.bib. Next, it uses R to highlight a selected author.\n\n\n\n\n\n\nImportant\n\n\n\nTo make it work with your .bib file, you need to populate pubs.bib with your publications or include another .bib file in the directory. If that’s the case, replace pubs.bib by &lt;your-file&gt;.bib in the Makefile. Make sure you also changes Hernandez, K. in the Makefile to the way your name appears in the references.\n\n\nNow, we run:\n#| eval: false\nmake publications\nand it will generate a publications.qmd file. Now we only need to tell our _quarto.yml how to “find” this new file."
  },
  {
    "objectID": "posts/quarto-website/index.html#step-4-publishing",
    "href": "posts/quarto-website/index.html#step-4-publishing",
    "title": "Crafting your website with Quarto and GitHub",
    "section": "Step 4: Publishing",
    "text": "Step 4: Publishing\nPublishing the website will be one of the easiest parts. We will use GitHub Actions (GA) and GitHub pages.\nBasically, all you have to do is to go to your repository on GitHub, click on Settings &gt; Pages. Next, under Build and Deployment, set Deploy from a branch, and, under Branch, select main and /docs.\n\nNext, you should create a new branch called gh-pages. To do so, click on main, and then on View all branches. Next, create new branch. Name the new branch as gh-pages.\nNow, every time you push your changes to github, the website will be deployed (published) at &lt;your-username&gt;.github.io."
  },
  {
    "objectID": "posts/quarto-website/index.html#closing-comments",
    "href": "posts/quarto-website/index.html#closing-comments",
    "title": "Crafting your website with Quarto and GitHub",
    "section": "Closing comments",
    "text": "Closing comments\nCreating a website is a fun task that may take a lot of your time if you are too attached to details, be mindful. The best way to move forward, is being good at Googling and paying attention to the error messages (do never dismiss them!).\nThere are many resources online teaching you how to customize your documents, write reports, and so on in Quarto. If you want to do something different, is very likely that someone has already done that. So, once again, always search the web thoroughly to avoid “reinventing the wheel”."
  },
  {
    "objectID": "posts/quarto-website/index.html#further-resources-explore",
    "href": "posts/quarto-website/index.html#further-resources-explore",
    "title": "Crafting your website with Quarto and GitHub",
    "section": "Further resources (explore)",
    "text": "Further resources (explore)\n\nQuarto website provides a bunch of resources;\nCustomizing Quarto Websites talk, by Sam Csik;"
  }
]